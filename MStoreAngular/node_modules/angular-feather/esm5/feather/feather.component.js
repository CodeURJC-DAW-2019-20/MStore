import * as tslib_1 from "tslib";
import { Component, ElementRef, Input, Inject, ChangeDetectorRef, OnChanges, SimpleChanges } from '@angular/core';
import { Icons } from './icons.provider';
import { uppercamelcase } from './utils';
var FeatherComponent = /** @class */ (function () {
    function FeatherComponent(elem, changeDetector, icons) {
        this.elem = elem;
        this.changeDetector = changeDetector;
        this.icons = icons;
    }
    FeatherComponent.prototype.ngOnChanges = function (changes) {
        // icons are provided as an array of objects because of "multi: true"
        var icons = Object.assign.apply(Object, tslib_1.__spread([{}], this.icons));
        var svg = icons[uppercamelcase(changes.name.currentValue)] || '';
        if (!svg) {
            console.warn("Icon not found: " + changes.name.currentValue + "\n" +
                "Refer to documentation on https://github.com/michaelbazos/angular-feather");
        }
        this.elem.nativeElement.innerHTML = svg;
        this.changeDetector.markForCheck();
    };
    FeatherComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: Icons, decorators: [{ type: Inject, args: [Icons,] }] }
    ]; };
    tslib_1.__decorate([
        Input()
    ], FeatherComponent.prototype, "name", void 0);
    FeatherComponent = tslib_1.__decorate([
        Component({
            // tslint:disable-next-line:component-selector
            selector: 'i-feather, feather-icon',
            template: "<ng-content></ng-content>\n",
            styles: [":host{display:inline-block;width:24px;height:24px;fill:none;stroke:currentColor;stroke-width:2px;stroke-linecap:round;stroke-linejoin:round}"]
        }),
        tslib_1.__param(2, Inject(Icons))
    ], FeatherComponent);
    return FeatherComponent;
}());
export { FeatherComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmVhdGhlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLWZlYXRoZXIvIiwic291cmNlcyI6WyJmZWF0aGVyL2ZlYXRoZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxhQUFhLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbEgsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ3pDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFTekM7SUFHRSwwQkFDVSxJQUFnQixFQUNoQixjQUFpQyxFQUNsQixLQUFZO1FBRjNCLFNBQUksR0FBSixJQUFJLENBQVk7UUFDaEIsbUJBQWMsR0FBZCxjQUFjLENBQW1CO1FBQ2xCLFVBQUssR0FBTCxLQUFLLENBQU87SUFDbEMsQ0FBQztJQUVKLHNDQUFXLEdBQVgsVUFBWSxPQUFzQjtRQUNoQyxxRUFBcUU7UUFDckUsSUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLE1BQU0sT0FBYixNQUFNLG9CQUFRLEVBQUUsR0FBTSxJQUFJLENBQUMsS0FBeUIsRUFBQyxDQUFDO1FBQ3BFLElBQU0sR0FBRyxHQUFHLEtBQUssQ0FBRSxjQUFjLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBRSxJQUFJLEVBQUUsQ0FBQztRQUVyRSxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ1IsT0FBTyxDQUFDLElBQUksQ0FDVixxQkFBbUIsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLE9BQUk7Z0JBQ2hELDJFQUEyRSxDQUM1RSxDQUFDO1NBQ0g7UUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLEdBQUcsR0FBRyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDckMsQ0FBQzs7Z0JBbkJlLFVBQVU7Z0JBQ0EsaUJBQWlCO2dCQUNYLEtBQUssdUJBQWxDLE1BQU0sU0FBQyxLQUFLOztJQUxOO1FBQVIsS0FBSyxFQUFFO2tEQUFlO0lBRFosZ0JBQWdCO1FBTjVCLFNBQVMsQ0FBQztZQUNULDhDQUE4QztZQUM5QyxRQUFRLEVBQUUseUJBQXlCO1lBQ25DLHVDQUF1Qzs7U0FFeEMsQ0FBQztRQU9HLG1CQUFBLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQTtPQU5MLGdCQUFnQixDQXdCNUI7SUFBRCx1QkFBQztDQUFBLEFBeEJELElBd0JDO1NBeEJZLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgSW5wdXQsIEluamVjdCwgQ2hhbmdlRGV0ZWN0b3JSZWYsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSWNvbnMgfSBmcm9tICcuL2ljb25zLnByb3ZpZGVyJztcbmltcG9ydCB7IHVwcGVyY2FtZWxjYXNlIH0gZnJvbSAnLi91dGlscyc7XG5cblxuQENvbXBvbmVudCh7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpjb21wb25lbnQtc2VsZWN0b3JcbiAgc2VsZWN0b3I6ICdpLWZlYXRoZXIsIGZlYXRoZXItaWNvbicsXG4gIHRlbXBsYXRlVXJsOiAnLi9mZWF0aGVyLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbICcuL2ZlYXRoZXIuY29tcG9uZW50LnNjc3MnIF0sXG59KVxuZXhwb3J0IGNsYXNzIEZlYXRoZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuICBASW5wdXQoKSBuYW1lITogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgZWxlbTogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIGNoYW5nZURldGVjdG9yOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICBASW5qZWN0KEljb25zKSBwcml2YXRlIGljb25zOiBJY29uc1xuICApIHt9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIC8vIGljb25zIGFyZSBwcm92aWRlZCBhcyBhbiBhcnJheSBvZiBvYmplY3RzIGJlY2F1c2Ugb2YgXCJtdWx0aTogdHJ1ZVwiXG4gICAgY29uc3QgaWNvbnMgPSBPYmplY3QuYXNzaWduKHt9LCAuLi4odGhpcy5pY29ucyBhcyBhbnkgYXMgb2JqZWN0W10pKTtcbiAgICBjb25zdCBzdmcgPSBpY29uc1sgdXBwZXJjYW1lbGNhc2UoY2hhbmdlcy5uYW1lLmN1cnJlbnRWYWx1ZSkgXSB8fCAnJztcblxuICAgIGlmICghc3ZnKSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGBJY29uIG5vdCBmb3VuZDogJHtjaGFuZ2VzLm5hbWUuY3VycmVudFZhbHVlfVxcbmAgK1xuICAgICAgICBgUmVmZXIgdG8gZG9jdW1lbnRhdGlvbiBvbiBodHRwczovL2dpdGh1Yi5jb20vbWljaGFlbGJhem9zL2FuZ3VsYXItZmVhdGhlcmBcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdGhpcy5lbGVtLm5hdGl2ZUVsZW1lbnQuaW5uZXJIVE1MID0gc3ZnO1xuICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3IubWFya0ZvckNoZWNrKCk7XG4gIH1cbn1cbiJdfQ==