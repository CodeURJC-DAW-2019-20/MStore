import { __decorate, __param } from 'tslib';
import { ElementRef, ChangeDetectorRef, Inject, Input, Component, Optional, NgModule } from '@angular/core';

import * as ɵngcc0 from '@angular/core';

const _c0 = ["*"];
class Icons {
    constructor(icons) {
        this.icons = icons;
    }
}

function uppercamelcase(str) {
    return str.toLowerCase().replace(/(?:^\w|[A-Z]|\b\w)/g, (firstLetter) => {
        return firstLetter.toUpperCase();
    }).replace(/[-_]/g, '');
}

let FeatherComponent = class FeatherComponent {
    constructor(elem, changeDetector, icons) {
        this.elem = elem;
        this.changeDetector = changeDetector;
        this.icons = icons;
    }
    ngOnChanges(changes) {
        // icons are provided as an array of objects because of "multi: true"
        const icons = Object.assign({}, ...this.icons);
        const svg = icons[uppercamelcase(changes.name.currentValue)] || '';
        if (!svg) {
            console.warn(`Icon not found: ${changes.name.currentValue}\n` +
                `Refer to documentation on https://github.com/michaelbazos/angular-feather`);
        }
        this.elem.nativeElement.innerHTML = svg;
        this.changeDetector.markForCheck();
    }
};
FeatherComponent.ɵfac = function FeatherComponent_Factory(t) { return new (t || FeatherComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(Icons)); };
FeatherComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FeatherComponent, selectors: [["i-feather"], ["feather-icon"]], inputs: { name: "name" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function FeatherComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, styles: ["[_nghost-%COMP%]{display:inline-block;width:24px;height:24px;fill:none;stroke:currentColor;stroke-width:2px;stroke-linecap:round;stroke-linejoin:round}"] });
FeatherComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: Icons, decorators: [{ type: Inject, args: [Icons,] }] }
];
__decorate([
    Input()
], FeatherComponent.prototype, "name", void 0);
FeatherComponent = __decorate([ __param(2, Inject(Icons))
], FeatherComponent);

var FeatherModule_1;
let FeatherModule = FeatherModule_1 = class FeatherModule {
    constructor(icons) {
        this.icons = icons;
        if (!this.icons) {
            throw new Error(`No icon provided. Make sure to use 'FeatherModule.pick({ ... })' when importing the module\n` +
                `Refer to documentation on https://github.com/michaelbazos/angular-feather`);
        }
    }
    static pick(icons) {
        return {
            ngModule: FeatherModule_1,
            providers: [
                { provide: Icons, multi: true, useValue: icons }
            ]
        };
    }
};
FeatherModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: FeatherModule });
FeatherModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function FeatherModule_Factory(t) { return new (t || FeatherModule)(ɵngcc0.ɵɵinject(Icons, 8)); } });
FeatherModule.ctorParameters = () => [
    { type: Icons, decorators: [{ type: Optional }] }
];
FeatherModule = FeatherModule_1 = __decorate([ __param(0, Optional())
], FeatherModule);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FeatherComponent, [{
        type: Component,
        args: [{
                // tslint:disable-next-line:component-selector
                selector: 'i-feather, feather-icon',
                template: "<ng-content></ng-content>\n",
                styles: [":host{display:inline-block;width:24px;height:24px;fill:none;stroke:currentColor;stroke-width:2px;stroke-linecap:round;stroke-linejoin:round}"]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: Icons, decorators: [{
                type: Inject,
                args: [Icons]
            }] }]; }, { name: [{
            type: Input
        }] }); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FeatherModule, { declarations: [FeatherComponent], exports: [FeatherComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FeatherModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    FeatherComponent
                ],
                exports: [
                    FeatherComponent
                ]
            }]
    }], function () { return [{ type: Icons, decorators: [{
                type: Optional
            }] }]; }, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { FeatherModule, FeatherComponent as ɵa, Icons as ɵb };

//# sourceMappingURL=angular-feather.js.map