import { EventEmitter, Injector, QueryList, TemplateRef, AfterViewInit } from '@angular/core';
import { Observable } from 'rxjs';
import { Ng2Dropdown, Ng2MenuItem } from 'ng2-material-dropdown';
import { TagModel } from '../../core/accessor';
import { TagInputComponent } from '../tag-input/tag-input';
import * as ɵngcc0 from '@angular/core';
export declare class TagInputDropdown implements AfterViewInit {
    private readonly injector;
    /**
     * @name dropdown
     */
    dropdown: Ng2Dropdown;
    /**
     * @name menuTemplate
     * @desc reference to the template if provided by the user
     */
    templates: QueryList<TemplateRef<any>>;
    /**
     * @name offset
     */
    offset: string;
    /**
     * @name focusFirstElement
     */
    focusFirstElement: boolean;
    /**
     * - show autocomplete dropdown if the value of input is empty
     * @name showDropdownIfEmpty
     */
    showDropdownIfEmpty: boolean;
    /**
     * @description observable passed as input which populates the autocomplete items
     * @name autocompleteObservable
     */
    autocompleteObservable: (text: string) => Observable<any>;
    /**
     * - desc minimum text length in order to display the autocomplete dropdown
     * @name minimumTextLength
     */
    minimumTextLength: number;
    /**
     * - number of items to display in the autocomplete dropdown
     * @name limitItemsTo
     */
    limitItemsTo: number;
    /**
     * @name displayBy
     */
    displayBy: string;
    /**
     * @name identifyBy
     */
    identifyBy: string;
    /**
     * @description a function a developer can use to implement custom matching for the autocomplete
     * @name matchingFn
     */
    matchingFn: (value: string, target: TagModel) => boolean;
    /**
     * @name appendToBody
     */
    appendToBody: boolean;
    /**
     * @name keepOpen
     * @description option to leave dropdown open when adding a new item
     */
    keepOpen: boolean;
    /**
     * @name dynamicUpdate
     */
    dynamicUpdate: boolean;
    /**
     * @name zIndex
     */
    zIndex: number;
    /**
     * list of items that match the current value of the input (for autocomplete)
     * @name items
     */
    items: TagModel[];
    /**
     * @name tagInput
     */
    tagInput: TagInputComponent;
    /**
     * @name _autocompleteItems
     */
    private _autocompleteItems;
    /**
     * @name autocompleteItems
     * @param items
     */
    /**
    * @name autocompleteItems
    * @desc array of items that will populate the autocomplete
    */
    autocompleteItems: TagModel[];
    constructor(injector: Injector);
    /**
     * @name ngAfterviewInit
     */
    ngAfterViewInit(): void;
    /**
     * @name updatePosition
     */
    updatePosition(): void;
    /**
     * @name isVisible
     */
    readonly isVisible: boolean;
    /**
     * @name onHide
     */
    onHide(): EventEmitter<Ng2Dropdown>;
    /**
     * @name onItemClicked
     */
    onItemClicked(): EventEmitter<string>;
    /**
     * @name selectedItem
     */
    readonly selectedItem: Ng2MenuItem;
    /**
     * @name state
     */
    readonly state: any;
    /**
     *
     * @name show
     */
    show: () => void;
    /**
     * @name hide
     */
    hide(): void;
    /**
     * @name scrollListener
     */
    scrollListener(): void;
    /**
     * @name onWindowBlur
     */
    onWindowBlur(): void;
    /**
     * @name getFormValue
     */
    private getFormValue;
    /**
     * @name calculatePosition
     */
    private calculatePosition;
    /**
     * @name requestAdding
     * @param item {Ng2MenuItem}
     */
    private requestAdding;
    /**
     * @name createTagModel
     * @param item
     */
    private createTagModel;
    /**
     *
     * @param value {string}
     */
    private getMatchingItems;
    /**
     * @name setItems
     */
    private setItems;
    /**
     * @name resetItems
     */
    private resetItems;
    /**
     * @name populateItems
     * @param data
     */
    private populateItems;
    /**
     * @name getItemsFromObservable
     * @param text
     */
    private getItemsFromObservable;
    /**
     * @name setLoadingState
     * @param state
     */
    private setLoadingState;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TagInputDropdown>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TagInputDropdown, "tag-input-dropdown", never, {
    "offset": "offset";
    "focusFirstElement": "focusFirstElement";
    "showDropdownIfEmpty": "showDropdownIfEmpty";
    "minimumTextLength": "minimumTextLength";
    "limitItemsTo": "limitItemsTo";
    "displayBy": "displayBy";
    "identifyBy": "identifyBy";
    "matchingFn": "matchingFn";
    "appendToBody": "appendToBody";
    "keepOpen": "keepOpen";
    "dynamicUpdate": "dynamicUpdate";
    "zIndex": "zIndex";
    "autocompleteItems": "autocompleteItems";
    "autocompleteObservable": "autocompleteObservable";
}, {}, ["templates"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFnLWlucHV0LWRyb3Bkb3duLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJ0YWctaW5wdXQtZHJvcGRvd24uY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUtBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXVMQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgSW5qZWN0b3IsIFF1ZXJ5TGlzdCwgVGVtcGxhdGVSZWYsIEFmdGVyVmlld0luaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE5nMkRyb3Bkb3duLCBOZzJNZW51SXRlbSB9IGZyb20gJ25nMi1tYXRlcmlhbC1kcm9wZG93bic7XG5pbXBvcnQgeyBUYWdNb2RlbCB9IGZyb20gJy4uLy4uL2NvcmUvYWNjZXNzb3InO1xuaW1wb3J0IHsgVGFnSW5wdXRDb21wb25lbnQgfSBmcm9tICcuLi90YWctaW5wdXQvdGFnLWlucHV0JztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFRhZ0lucHV0RHJvcGRvd24gaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGluamVjdG9yO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIGRyb3Bkb3duXG4gICAgICovXG4gICAgZHJvcGRvd246IE5nMkRyb3Bkb3duO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIG1lbnVUZW1wbGF0ZVxuICAgICAqIEBkZXNjIHJlZmVyZW5jZSB0byB0aGUgdGVtcGxhdGUgaWYgcHJvdmlkZWQgYnkgdGhlIHVzZXJcbiAgICAgKi9cbiAgICB0ZW1wbGF0ZXM6IFF1ZXJ5TGlzdDxUZW1wbGF0ZVJlZjxhbnk+PjtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBvZmZzZXRcbiAgICAgKi9cbiAgICBvZmZzZXQ6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAbmFtZSBmb2N1c0ZpcnN0RWxlbWVudFxuICAgICAqL1xuICAgIGZvY3VzRmlyc3RFbGVtZW50OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIC0gc2hvdyBhdXRvY29tcGxldGUgZHJvcGRvd24gaWYgdGhlIHZhbHVlIG9mIGlucHV0IGlzIGVtcHR5XG4gICAgICogQG5hbWUgc2hvd0Ryb3Bkb3duSWZFbXB0eVxuICAgICAqL1xuICAgIHNob3dEcm9wZG93bklmRW1wdHk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQGRlc2NyaXB0aW9uIG9ic2VydmFibGUgcGFzc2VkIGFzIGlucHV0IHdoaWNoIHBvcHVsYXRlcyB0aGUgYXV0b2NvbXBsZXRlIGl0ZW1zXG4gICAgICogQG5hbWUgYXV0b2NvbXBsZXRlT2JzZXJ2YWJsZVxuICAgICAqL1xuICAgIGF1dG9jb21wbGV0ZU9ic2VydmFibGU6ICh0ZXh0OiBzdHJpbmcpID0+IE9ic2VydmFibGU8YW55PjtcbiAgICAvKipcbiAgICAgKiAtIGRlc2MgbWluaW11bSB0ZXh0IGxlbmd0aCBpbiBvcmRlciB0byBkaXNwbGF5IHRoZSBhdXRvY29tcGxldGUgZHJvcGRvd25cbiAgICAgKiBAbmFtZSBtaW5pbXVtVGV4dExlbmd0aFxuICAgICAqL1xuICAgIG1pbmltdW1UZXh0TGVuZ3RoOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogLSBudW1iZXIgb2YgaXRlbXMgdG8gZGlzcGxheSBpbiB0aGUgYXV0b2NvbXBsZXRlIGRyb3Bkb3duXG4gICAgICogQG5hbWUgbGltaXRJdGVtc1RvXG4gICAgICovXG4gICAgbGltaXRJdGVtc1RvOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQG5hbWUgZGlzcGxheUJ5XG4gICAgICovXG4gICAgZGlzcGxheUJ5OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQG5hbWUgaWRlbnRpZnlCeVxuICAgICAqL1xuICAgIGlkZW50aWZ5Qnk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAZGVzY3JpcHRpb24gYSBmdW5jdGlvbiBhIGRldmVsb3BlciBjYW4gdXNlIHRvIGltcGxlbWVudCBjdXN0b20gbWF0Y2hpbmcgZm9yIHRoZSBhdXRvY29tcGxldGVcbiAgICAgKiBAbmFtZSBtYXRjaGluZ0ZuXG4gICAgICovXG4gICAgbWF0Y2hpbmdGbjogKHZhbHVlOiBzdHJpbmcsIHRhcmdldDogVGFnTW9kZWwpID0+IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQG5hbWUgYXBwZW5kVG9Cb2R5XG4gICAgICovXG4gICAgYXBwZW5kVG9Cb2R5OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIGtlZXBPcGVuXG4gICAgICogQGRlc2NyaXB0aW9uIG9wdGlvbiB0byBsZWF2ZSBkcm9wZG93biBvcGVuIHdoZW4gYWRkaW5nIGEgbmV3IGl0ZW1cbiAgICAgKi9cbiAgICBrZWVwT3BlbjogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBkeW5hbWljVXBkYXRlXG4gICAgICovXG4gICAgZHluYW1pY1VwZGF0ZTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAbmFtZSB6SW5kZXhcbiAgICAgKi9cbiAgICB6SW5kZXg6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBsaXN0IG9mIGl0ZW1zIHRoYXQgbWF0Y2ggdGhlIGN1cnJlbnQgdmFsdWUgb2YgdGhlIGlucHV0IChmb3IgYXV0b2NvbXBsZXRlKVxuICAgICAqIEBuYW1lIGl0ZW1zXG4gICAgICovXG4gICAgaXRlbXM6IFRhZ01vZGVsW107XG4gICAgLyoqXG4gICAgICogQG5hbWUgdGFnSW5wdXRcbiAgICAgKi9cbiAgICB0YWdJbnB1dDogVGFnSW5wdXRDb21wb25lbnQ7XG4gICAgLyoqXG4gICAgICogQG5hbWUgX2F1dG9jb21wbGV0ZUl0ZW1zXG4gICAgICovXG4gICAgcHJpdmF0ZSBfYXV0b2NvbXBsZXRlSXRlbXM7XG4gICAgLyoqXG4gICAgICogQG5hbWUgYXV0b2NvbXBsZXRlSXRlbXNcbiAgICAgKiBAcGFyYW0gaXRlbXNcbiAgICAgKi9cbiAgICAvKipcbiAgICAqIEBuYW1lIGF1dG9jb21wbGV0ZUl0ZW1zXG4gICAgKiBAZGVzYyBhcnJheSBvZiBpdGVtcyB0aGF0IHdpbGwgcG9wdWxhdGUgdGhlIGF1dG9jb21wbGV0ZVxuICAgICovXG4gICAgYXV0b2NvbXBsZXRlSXRlbXM6IFRhZ01vZGVsW107XG4gICAgY29uc3RydWN0b3IoaW5qZWN0b3I6IEluamVjdG9yKTtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBuZ0FmdGVydmlld0luaXRcbiAgICAgKi9cbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAbmFtZSB1cGRhdGVQb3NpdGlvblxuICAgICAqL1xuICAgIHVwZGF0ZVBvc2l0aW9uKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQG5hbWUgaXNWaXNpYmxlXG4gICAgICovXG4gICAgcmVhZG9ubHkgaXNWaXNpYmxlOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIG9uSGlkZVxuICAgICAqL1xuICAgIG9uSGlkZSgpOiBFdmVudEVtaXR0ZXI8TmcyRHJvcGRvd24+O1xuICAgIC8qKlxuICAgICAqIEBuYW1lIG9uSXRlbUNsaWNrZWRcbiAgICAgKi9cbiAgICBvbkl0ZW1DbGlja2VkKCk6IEV2ZW50RW1pdHRlcjxzdHJpbmc+O1xuICAgIC8qKlxuICAgICAqIEBuYW1lIHNlbGVjdGVkSXRlbVxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNlbGVjdGVkSXRlbTogTmcyTWVudUl0ZW07XG4gICAgLyoqXG4gICAgICogQG5hbWUgc3RhdGVcbiAgICAgKi9cbiAgICByZWFkb25seSBzdGF0ZTogYW55O1xuICAgIC8qKlxuICAgICAqXG4gICAgICogQG5hbWUgc2hvd1xuICAgICAqL1xuICAgIHNob3c6ICgpID0+IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQG5hbWUgaGlkZVxuICAgICAqL1xuICAgIGhpZGUoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBzY3JvbGxMaXN0ZW5lclxuICAgICAqL1xuICAgIHNjcm9sbExpc3RlbmVyKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQG5hbWUgb25XaW5kb3dCbHVyXG4gICAgICovXG4gICAgb25XaW5kb3dCbHVyKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQG5hbWUgZ2V0Rm9ybVZhbHVlXG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXRGb3JtVmFsdWU7XG4gICAgLyoqXG4gICAgICogQG5hbWUgY2FsY3VsYXRlUG9zaXRpb25cbiAgICAgKi9cbiAgICBwcml2YXRlIGNhbGN1bGF0ZVBvc2l0aW9uO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIHJlcXVlc3RBZGRpbmdcbiAgICAgKiBAcGFyYW0gaXRlbSB7TmcyTWVudUl0ZW19XG4gICAgICovXG4gICAgcHJpdmF0ZSByZXF1ZXN0QWRkaW5nO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIGNyZWF0ZVRhZ01vZGVsXG4gICAgICogQHBhcmFtIGl0ZW1cbiAgICAgKi9cbiAgICBwcml2YXRlIGNyZWF0ZVRhZ01vZGVsO1xuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHZhbHVlIHtzdHJpbmd9XG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXRNYXRjaGluZ0l0ZW1zO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIHNldEl0ZW1zXG4gICAgICovXG4gICAgcHJpdmF0ZSBzZXRJdGVtcztcbiAgICAvKipcbiAgICAgKiBAbmFtZSByZXNldEl0ZW1zXG4gICAgICovXG4gICAgcHJpdmF0ZSByZXNldEl0ZW1zO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIHBvcHVsYXRlSXRlbXNcbiAgICAgKiBAcGFyYW0gZGF0YVxuICAgICAqL1xuICAgIHByaXZhdGUgcG9wdWxhdGVJdGVtcztcbiAgICAvKipcbiAgICAgKiBAbmFtZSBnZXRJdGVtc0Zyb21PYnNlcnZhYmxlXG4gICAgICogQHBhcmFtIHRleHRcbiAgICAgKi9cbiAgICBwcml2YXRlIGdldEl0ZW1zRnJvbU9ic2VydmFibGU7XG4gICAgLyoqXG4gICAgICogQG5hbWUgc2V0TG9hZGluZ1N0YXRlXG4gICAgICogQHBhcmFtIHN0YXRlXG4gICAgICovXG4gICAgcHJpdmF0ZSBzZXRMb2FkaW5nU3RhdGU7XG59XG4iXX0=