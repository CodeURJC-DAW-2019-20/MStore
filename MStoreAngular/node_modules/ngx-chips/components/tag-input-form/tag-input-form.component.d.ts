import { EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { AsyncValidatorFn, FormControl, FormGroup, ValidatorFn } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
export declare class TagInputForm implements OnInit, OnChanges {
    /**
     * @name onSubmit
     */
    onSubmit: EventEmitter<any>;
    /**
     * @name onBlur
     */
    onBlur: EventEmitter<any>;
    /**
     * @name onFocus
     */
    onFocus: EventEmitter<any>;
    /**
     * @name onKeyup
     */
    onKeyup: EventEmitter<any>;
    /**
     * @name onKeydown
     */
    onKeydown: EventEmitter<any>;
    /**
     * @name inputTextChange
     */
    inputTextChange: EventEmitter<string>;
    /**
     * @name placeholder
     */
    placeholder: string;
    /**
     * @name validators
     */
    validators: ValidatorFn[];
    /**
     * @name asyncValidators
     * @desc array of AsyncValidator that are used to validate the tag before it gets appended to the list
     */
    asyncValidators: AsyncValidatorFn[];
    /**
     * @name inputId
     */
    inputId: string;
    /**
     * @name inputClass
     */
    inputClass: string;
    /**
     * @name tabindex
     * @desc pass through the specified tabindex to the input
     */
    tabindex: string;
    /**
     * @name disabled
     */
    disabled: boolean;
    /**
     * @name input
     */
    input: any;
    /**
     * @name form
     */
    form: FormGroup;
    /**
     * @name inputText
     */
    /**
    * @name inputText
    * @param text {string}
    */
    inputText: string;
    private readonly item;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * @name value
     */
    readonly value: FormControl;
    /**
     * @name isInputFocused
     */
    isInputFocused(): boolean;
    /**
     * @name getErrorMessages
     * @param messages
     */
    getErrorMessages(messages: {
        [key: string]: string;
    }): string[];
    /**
     * @name hasErrors
     */
    hasErrors(): boolean;
    /**
     * @name focus
     */
    focus(): void;
    /**
     * @name blur
     */
    blur(): void;
    /**
     * @name getElementPosition
     */
    getElementPosition(): ClientRect;
    /**
     * - removes input from the component
     * @name destroy
     */
    destroy(): void;
    /**
     * @name onKeyDown
     * @param $event
     */
    onKeyDown($event: any): void;
    /**
     * @name onKeyUp
     * @param $event
     */
    onKeyUp($event: any): void;
    /**
     * @name submit
     */
    submit($event: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TagInputForm>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TagInputForm, "tag-input-form", never, {
    "validators": "validators";
    "asyncValidators": "asyncValidators";
    "tabindex": "tabindex";
    "disabled": "disabled";
    "inputText": "inputText";
    "placeholder": "placeholder";
    "inputId": "inputId";
    "inputClass": "inputClass";
}, {
    "onSubmit": "onSubmit";
    "onBlur": "onBlur";
    "onFocus": "onFocus";
    "onKeyup": "onKeyup";
    "onKeydown": "onKeydown";
    "inputTextChange": "inputTextChange";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFnLWlucHV0LWZvcm0uY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInRhZy1pbnB1dC1mb3JtLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTRIQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBPbkluaXQsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFzeW5jVmFsaWRhdG9yRm4sIEZvcm1Db250cm9sLCBGb3JtR3JvdXAsIFZhbGlkYXRvckZuIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVGFnSW5wdXRGb3JtIGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xuICAgIC8qKlxuICAgICAqIEBuYW1lIG9uU3VibWl0XG4gICAgICovXG4gICAgb25TdWJtaXQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIC8qKlxuICAgICAqIEBuYW1lIG9uQmx1clxuICAgICAqL1xuICAgIG9uQmx1cjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgLyoqXG4gICAgICogQG5hbWUgb25Gb2N1c1xuICAgICAqL1xuICAgIG9uRm9jdXM6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIC8qKlxuICAgICAqIEBuYW1lIG9uS2V5dXBcbiAgICAgKi9cbiAgICBvbktleXVwOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBvbktleWRvd25cbiAgICAgKi9cbiAgICBvbktleWRvd246IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIC8qKlxuICAgICAqIEBuYW1lIGlucHV0VGV4dENoYW5nZVxuICAgICAqL1xuICAgIGlucHV0VGV4dENoYW5nZTogRXZlbnRFbWl0dGVyPHN0cmluZz47XG4gICAgLyoqXG4gICAgICogQG5hbWUgcGxhY2Vob2xkZXJcbiAgICAgKi9cbiAgICBwbGFjZWhvbGRlcjogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIHZhbGlkYXRvcnNcbiAgICAgKi9cbiAgICB2YWxpZGF0b3JzOiBWYWxpZGF0b3JGbltdO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIGFzeW5jVmFsaWRhdG9yc1xuICAgICAqIEBkZXNjIGFycmF5IG9mIEFzeW5jVmFsaWRhdG9yIHRoYXQgYXJlIHVzZWQgdG8gdmFsaWRhdGUgdGhlIHRhZyBiZWZvcmUgaXQgZ2V0cyBhcHBlbmRlZCB0byB0aGUgbGlzdFxuICAgICAqL1xuICAgIGFzeW5jVmFsaWRhdG9yczogQXN5bmNWYWxpZGF0b3JGbltdO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIGlucHV0SWRcbiAgICAgKi9cbiAgICBpbnB1dElkOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQG5hbWUgaW5wdXRDbGFzc1xuICAgICAqL1xuICAgIGlucHV0Q2xhc3M6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAbmFtZSB0YWJpbmRleFxuICAgICAqIEBkZXNjIHBhc3MgdGhyb3VnaCB0aGUgc3BlY2lmaWVkIHRhYmluZGV4IHRvIHRoZSBpbnB1dFxuICAgICAqL1xuICAgIHRhYmluZGV4OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQG5hbWUgZGlzYWJsZWRcbiAgICAgKi9cbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBpbnB1dFxuICAgICAqL1xuICAgIGlucHV0OiBhbnk7XG4gICAgLyoqXG4gICAgICogQG5hbWUgZm9ybVxuICAgICAqL1xuICAgIGZvcm06IEZvcm1Hcm91cDtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBpbnB1dFRleHRcbiAgICAgKi9cbiAgICAvKipcbiAgICAqIEBuYW1lIGlucHV0VGV4dFxuICAgICogQHBhcmFtIHRleHQge3N0cmluZ31cbiAgICAqL1xuICAgIGlucHV0VGV4dDogc3RyaW5nO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgaXRlbTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIHZhbHVlXG4gICAgICovXG4gICAgcmVhZG9ubHkgdmFsdWU6IEZvcm1Db250cm9sO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIGlzSW5wdXRGb2N1c2VkXG4gICAgICovXG4gICAgaXNJbnB1dEZvY3VzZWQoKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBnZXRFcnJvck1lc3NhZ2VzXG4gICAgICogQHBhcmFtIG1lc3NhZ2VzXG4gICAgICovXG4gICAgZ2V0RXJyb3JNZXNzYWdlcyhtZXNzYWdlczoge1xuICAgICAgICBba2V5OiBzdHJpbmddOiBzdHJpbmc7XG4gICAgfSk6IHN0cmluZ1tdO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIGhhc0Vycm9yc1xuICAgICAqL1xuICAgIGhhc0Vycm9ycygpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIGZvY3VzXG4gICAgICovXG4gICAgZm9jdXMoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBibHVyXG4gICAgICovXG4gICAgYmx1cigpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIGdldEVsZW1lbnRQb3NpdGlvblxuICAgICAqL1xuICAgIGdldEVsZW1lbnRQb3NpdGlvbigpOiBDbGllbnRSZWN0O1xuICAgIC8qKlxuICAgICAqIC0gcmVtb3ZlcyBpbnB1dCBmcm9tIHRoZSBjb21wb25lbnRcbiAgICAgKiBAbmFtZSBkZXN0cm95XG4gICAgICovXG4gICAgZGVzdHJveSgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIG9uS2V5RG93blxuICAgICAqIEBwYXJhbSAkZXZlbnRcbiAgICAgKi9cbiAgICBvbktleURvd24oJGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIG9uS2V5VXBcbiAgICAgKiBAcGFyYW0gJGV2ZW50XG4gICAgICovXG4gICAgb25LZXlVcCgkZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQG5hbWUgc3VibWl0XG4gICAgICovXG4gICAgc3VibWl0KCRldmVudDogYW55KTogdm9pZDtcbn1cbiJdfQ==