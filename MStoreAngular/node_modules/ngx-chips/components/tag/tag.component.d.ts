import { EventEmitter, TemplateRef, ElementRef, ChangeDetectorRef, Renderer2 } from '@angular/core';
import { TagModel } from '../../core/accessor';
import { TagRipple } from '../tag/tag-ripple.component';
import { EventLike } from '../../core/helpers/event-like';
import * as ɵngcc0 from '@angular/core';
export declare class TagComponent {
    element: ElementRef;
    renderer: Renderer2;
    private cdRef;
    /**
     * @name model {TagModel}
     */
    model: TagModel;
    /**
     * @name removable {boolean}
     */
    removable: boolean;
    /**
     * @name editable {boolean}
     */
    editable: boolean;
    /**
     * @name template {TemplateRef<any>}
     */
    template: TemplateRef<any>;
    /**
     * @name displayBy {string}
     */
    displayBy: string;
    /**
     * @name identifyBy {string}
     */
    identifyBy: string;
    /**
     * @name index {number}
     */
    index: number;
    /**
     * @name hasRipple
     */
    hasRipple: boolean;
    /**
     * @name disabled
     */
    disabled: boolean;
    /**
     * @name canAddTag
     */
    canAddTag: (tag: TagModel) => boolean;
    /**
     * @name onSelect
     */
    onSelect: EventEmitter<TagModel>;
    /**
     * @name onRemove
     */
    onRemove: EventEmitter<TagModel>;
    /**
     * @name onBlur
     */
    onBlur: EventEmitter<TagModel>;
    /**
     * @name onKeyDown
     */
    onKeyDown: EventEmitter<any>;
    /**
     * @name onTagEdited
     */
    onTagEdited: EventEmitter<TagModel>;
    /**
     * @name readonly {boolean}
     */
    readonly readonly: boolean;
    /**
     * @name editing
     */
    editing: boolean;
    /**
     * @name moving
     */
    moving: boolean;
    /**
     * @name rippleState
     */
    rippleState: string;
    /**
     * @name ripple {TagRipple}
     */
    ripple: TagRipple;
    constructor(element: ElementRef, renderer: Renderer2, cdRef: ChangeDetectorRef);
    /**
     * @name select
     */
    select($event?: MouseEvent): void;
    /**
     * @name remove
     */
    remove($event: MouseEvent): void;
    /**
     * @name focus
     */
    focus(): void;
    move(): void;
    /**
     * @name keydown
     * @param event
     */
    keydown(event: EventLike): void;
    /**
     * @name blink
     */
    blink(): void;
    /**
     * @name toggleEditMode
     */
    toggleEditMode(): void;
    /**
     * @name onBlurred
     * @param event
     */
    onBlurred(event: any): void;
    /**
     * @name getDisplayValue
     * @param item
     */
    getDisplayValue(item: TagModel): string;
    /**
     * @desc returns whether the ripple is visible or not
     * only works in Chrome
     * @name isRippleVisible
     */
    readonly isRippleVisible: boolean;
    /**
     * @name disableEditMode
     * @param $event
     */
    disableEditMode($event?: EventLike): void;
    /**
     * @name isDeleteIconVisible
     */
    isDeleteIconVisible(): boolean;
    /**
     * @name getContentEditableText
     */
    private getContentEditableText;
    /**
     * @name setContentEditableText
     * @param model
     */
    private setContentEditableText;
    /**
     * @name
     */
    private activateEditMode;
    /**
     * @name storeNewValue
     * @param input
     */
    private storeNewValue;
    /**
     * @name getContentEditable
     */
    private getContentEditable;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TagComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TagComponent, "tag", never, {
    "disabled": "disabled";
    "model": "model";
    "removable": "removable";
    "editable": "editable";
    "template": "template";
    "displayBy": "displayBy";
    "identifyBy": "identifyBy";
    "index": "index";
    "hasRipple": "hasRipple";
    "canAddTag": "canAddTag";
}, {
    "onSelect": "onSelect";
    "onRemove": "onRemove";
    "onBlur": "onBlur";
    "onKeyDown": "onKeyDown";
    "onTagEdited": "onTagEdited";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFnLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJ0YWcuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0FBSUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQThKQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgVGVtcGxhdGVSZWYsIEVsZW1lbnRSZWYsIENoYW5nZURldGVjdG9yUmVmLCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRhZ01vZGVsIH0gZnJvbSAnLi4vLi4vY29yZS9hY2Nlc3Nvcic7XG5pbXBvcnQgeyBUYWdSaXBwbGUgfSBmcm9tICcuLi90YWcvdGFnLXJpcHBsZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgRXZlbnRMaWtlIH0gZnJvbSAnLi4vLi4vY29yZS9oZWxwZXJzL2V2ZW50LWxpa2UnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVGFnQ29tcG9uZW50IHtcbiAgICBlbGVtZW50OiBFbGVtZW50UmVmO1xuICAgIHJlbmRlcmVyOiBSZW5kZXJlcjI7XG4gICAgcHJpdmF0ZSBjZFJlZjtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBtb2RlbCB7VGFnTW9kZWx9XG4gICAgICovXG4gICAgbW9kZWw6IFRhZ01vZGVsO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIHJlbW92YWJsZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICByZW1vdmFibGU6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQG5hbWUgZWRpdGFibGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgZWRpdGFibGU6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQG5hbWUgdGVtcGxhdGUge1RlbXBsYXRlUmVmPGFueT59XG4gICAgICovXG4gICAgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgLyoqXG4gICAgICogQG5hbWUgZGlzcGxheUJ5IHtzdHJpbmd9XG4gICAgICovXG4gICAgZGlzcGxheUJ5OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQG5hbWUgaWRlbnRpZnlCeSB7c3RyaW5nfVxuICAgICAqL1xuICAgIGlkZW50aWZ5Qnk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAbmFtZSBpbmRleCB7bnVtYmVyfVxuICAgICAqL1xuICAgIGluZGV4OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQG5hbWUgaGFzUmlwcGxlXG4gICAgICovXG4gICAgaGFzUmlwcGxlOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIGRpc2FibGVkXG4gICAgICovXG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQG5hbWUgY2FuQWRkVGFnXG4gICAgICovXG4gICAgY2FuQWRkVGFnOiAodGFnOiBUYWdNb2RlbCkgPT4gYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBvblNlbGVjdFxuICAgICAqL1xuICAgIG9uU2VsZWN0OiBFdmVudEVtaXR0ZXI8VGFnTW9kZWw+O1xuICAgIC8qKlxuICAgICAqIEBuYW1lIG9uUmVtb3ZlXG4gICAgICovXG4gICAgb25SZW1vdmU6IEV2ZW50RW1pdHRlcjxUYWdNb2RlbD47XG4gICAgLyoqXG4gICAgICogQG5hbWUgb25CbHVyXG4gICAgICovXG4gICAgb25CbHVyOiBFdmVudEVtaXR0ZXI8VGFnTW9kZWw+O1xuICAgIC8qKlxuICAgICAqIEBuYW1lIG9uS2V5RG93blxuICAgICAqL1xuICAgIG9uS2V5RG93bjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgLyoqXG4gICAgICogQG5hbWUgb25UYWdFZGl0ZWRcbiAgICAgKi9cbiAgICBvblRhZ0VkaXRlZDogRXZlbnRFbWl0dGVyPFRhZ01vZGVsPjtcbiAgICAvKipcbiAgICAgKiBAbmFtZSByZWFkb25seSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICByZWFkb25seSByZWFkb25seTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBlZGl0aW5nXG4gICAgICovXG4gICAgZWRpdGluZzogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBtb3ZpbmdcbiAgICAgKi9cbiAgICBtb3Zpbmc6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQG5hbWUgcmlwcGxlU3RhdGVcbiAgICAgKi9cbiAgICByaXBwbGVTdGF0ZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIHJpcHBsZSB7VGFnUmlwcGxlfVxuICAgICAqL1xuICAgIHJpcHBsZTogVGFnUmlwcGxlO1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQ6IEVsZW1lbnRSZWYsIHJlbmRlcmVyOiBSZW5kZXJlcjIsIGNkUmVmOiBDaGFuZ2VEZXRlY3RvclJlZik7XG4gICAgLyoqXG4gICAgICogQG5hbWUgc2VsZWN0XG4gICAgICovXG4gICAgc2VsZWN0KCRldmVudD86IE1vdXNlRXZlbnQpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIHJlbW92ZVxuICAgICAqL1xuICAgIHJlbW92ZSgkZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIGZvY3VzXG4gICAgICovXG4gICAgZm9jdXMoKTogdm9pZDtcbiAgICBtb3ZlKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQG5hbWUga2V5ZG93blxuICAgICAqIEBwYXJhbSBldmVudFxuICAgICAqL1xuICAgIGtleWRvd24oZXZlbnQ6IEV2ZW50TGlrZSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQG5hbWUgYmxpbmtcbiAgICAgKi9cbiAgICBibGluaygpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIHRvZ2dsZUVkaXRNb2RlXG4gICAgICovXG4gICAgdG9nZ2xlRWRpdE1vZGUoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBvbkJsdXJyZWRcbiAgICAgKiBAcGFyYW0gZXZlbnRcbiAgICAgKi9cbiAgICBvbkJsdXJyZWQoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQG5hbWUgZ2V0RGlzcGxheVZhbHVlXG4gICAgICogQHBhcmFtIGl0ZW1cbiAgICAgKi9cbiAgICBnZXREaXNwbGF5VmFsdWUoaXRlbTogVGFnTW9kZWwpOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQGRlc2MgcmV0dXJucyB3aGV0aGVyIHRoZSByaXBwbGUgaXMgdmlzaWJsZSBvciBub3RcbiAgICAgKiBvbmx5IHdvcmtzIGluIENocm9tZVxuICAgICAqIEBuYW1lIGlzUmlwcGxlVmlzaWJsZVxuICAgICAqL1xuICAgIHJlYWRvbmx5IGlzUmlwcGxlVmlzaWJsZTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBkaXNhYmxlRWRpdE1vZGVcbiAgICAgKiBAcGFyYW0gJGV2ZW50XG4gICAgICovXG4gICAgZGlzYWJsZUVkaXRNb2RlKCRldmVudD86IEV2ZW50TGlrZSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQG5hbWUgaXNEZWxldGVJY29uVmlzaWJsZVxuICAgICAqL1xuICAgIGlzRGVsZXRlSWNvblZpc2libGUoKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBnZXRDb250ZW50RWRpdGFibGVUZXh0XG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXRDb250ZW50RWRpdGFibGVUZXh0O1xuICAgIC8qKlxuICAgICAqIEBuYW1lIHNldENvbnRlbnRFZGl0YWJsZVRleHRcbiAgICAgKiBAcGFyYW0gbW9kZWxcbiAgICAgKi9cbiAgICBwcml2YXRlIHNldENvbnRlbnRFZGl0YWJsZVRleHQ7XG4gICAgLyoqXG4gICAgICogQG5hbWVcbiAgICAgKi9cbiAgICBwcml2YXRlIGFjdGl2YXRlRWRpdE1vZGU7XG4gICAgLyoqXG4gICAgICogQG5hbWUgc3RvcmVOZXdWYWx1ZVxuICAgICAqIEBwYXJhbSBpbnB1dFxuICAgICAqL1xuICAgIHByaXZhdGUgc3RvcmVOZXdWYWx1ZTtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBnZXRDb250ZW50RWRpdGFibGVcbiAgICAgKi9cbiAgICBwcml2YXRlIGdldENvbnRlbnRFZGl0YWJsZTtcbn1cbiJdfQ==